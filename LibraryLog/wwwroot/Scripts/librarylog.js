
    /****************************************************************************
    * Add a new TodoItem.
    *
    * 1) send an update to the DB
    * 2) if successful then add the item to the list
    ****************************************************************************/
    function addNewBook() {

        // Get the value from the Input field in the FORM
        let bookValue = document.getElementById("newBookTitle").value.trim();

    // Check that a value have added
    if (bookValue === "") {
        alert("Please enter a value for your item");
        }
    createBook(bookValue);
    document.getElementById("newBookTitle").value = "";
    }

    /****************************************************************************
     * This function will add the a new todo item to the UL element
     * Specifically this will add:
     *
     *   <li>the item description<span class="close">X</>li>
        *
        * 1) add to DB
        * 2) if successful then add the item to the list
        *
        ****************************************************************************/
function addBookItemToDisplay(item) {
        //alert(item.title);
        console.log(item);
        let bookItemNode = document.createElement("li");
        let descriptionTextNode = document.createTextNode(item["title"]);
        bookItemNode.appendChild(descriptionTextNode);
        console.log(bookItemNode);
        document.getElementById("booklist").appendChild(bookItemNode);

        let tickSpanNode = document.createElement("SPAN");
        let tickText = document.createTextNode("\u2713");  // \u2713 is unicode for the tick symbol
        tickSpanNode.appendChild(tickText);
        bookItemNode.appendChild(tickSpanNode);
        tickSpanNode.className = "tickHidden";

        let closeSpanNode = document.createElement("SPAN");
        let closeText = document.createTextNode("X");
        closeSpanNode.className = "close";
        closeSpanNode.appendChild(closeText);
        bookItemNode.appendChild(closeSpanNode);

        closeSpanNode.onclick = function (event) {
            // When the use press the "X" button, the click event is normally also passed to its parent element.
            // (i.e. the element containing the <SPAN>). In the case the LI element that is holding the TodoItem
            // which would have resulted in a toggle of item between "DONE" and "NEW"
            //
            // stopPropagation() tells the event not to propagate
            event.stopPropagation();

        if (confirm("Are you sure that you want to delete " + item.description + "?")) {
            deleteBookItem(item["id"]);

        // Remove the HTML list element that is holding this todo item
        bookItemNode.remove();
            }
        }

        bookItemNode.onclick = function () {
            if (item["status"] === "NEW") {
            item["status"] = "DONE"
        } else {
            item["status"] = "NEW"
        }

        updateBookItem(item);

        bookItemNode.classList.toggle("checked");
        tickSpanNode.classList.toggle("tickVisible");
        }

        if (item["status"] !== "NEW") {
            bookItemNode.classList.toggle("checked");
        tickSpanNode.classList.toggle("tickVisible");
        }
    }
    
        /****************************************************************************
         * CRUD functions calling the REST API
         ****************************************************************************/

       function createBook(bookItemTitle) {

        // Create a new JSON object for the new item with the status of NEW
        // Since the id is generated by the microservice, we will use -1 as a dummy
        // If the POST is successful the microservice will store the new item in the database
        // and returns a JSON via the response with the generated id for the new item
           
        const newItem = { "title": bookItemTitle, "status": "NEW"};
        
        const requestOptions = {
            method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(newItem)
        };
        fetch('http://localhost:5098/book', requestOptions)
            // get the JSON content from the response
            .then((response) => {
                
                if (!response.ok) {
            alert("An error has occurred.  Unable to create the Book item")
                    throw response.status;
                } else return response.json();
            })
           
            // add the item to the UL element so that it will appear in the browser
            //.then(() => readBookItems());
            .then(item => addBookItemToDisplay(item));
    }

        // Load the list - expecting an array of todo_items to be returned
function readBookItems() {
    //alert('hello');
            fetch('http://localhost:5098/book')
                // get the JSON content from the response
                .then((response) => {
                    if (!response.ok) {
                        alert("An error has occurred.  Unable to read the Book list")
                        throw response.status;
                    } else return response.json();
                })
                // Add the items to the UL element so that it can be seen
                // As items is an array, we will the array.map function to through the array and add item to the UL element
                // for display
                .then(items => items.map(item => addBookItemToDisplay(item)));
    }

        function updateBookItem(item) {
        const requestOptions = {
            method: 'PUT',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(item)
        };
        fetch('http://localhost:5098/book/' + item.id, requestOptions)
            .then((response) => {
                if (!response.ok) {
            alert("An error has occurred.  Unable to UPDATE the Book item")
                    throw response.status;
                } else return response.json();
            })
    }

        function deleteBookItem(bookId) {
            fetch("http://localhost:5098/book/" + bookId, { method: 'DELETE' })
                .then((response) => {
                    if (!response.ok) {
                        alert("An error has occurred.  Unable to DELETE the Book item")
                        throw response.status;
                    } else return response.json();
                })
        }
